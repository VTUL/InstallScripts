---
- name: make sure active_job_backend setting is valid
  fail:
    msg: 'active_job_backend ({{ active_job_backend }}) needs to be either sidekiq or resque.'
  when:
    - active_job_backend != 'sidekiq'
    - active_job_backend != 'resque'

- name: install apt dependencies
  apt:
    name: '{{ item }}'
    state: present
    cache_valid_time: '{{ apt_cache_timeout }}'
    update_cache: yes
  with_items:
    - git
    - unzip
    - imagemagick
    - libreoffice
    - zlib1g-dev
    - libsqlite3-dev

- name: make sure project user owns the application
  file:
    path: '{{ project_app_root }}'
    owner: '{{ project_owner }}'
    group: '{{ project_owner_group }}'
    mode: '0755'
    state: directory

- name: clone the repo
  git:
    repo: '{{ project_git_url }}'
    dest: '{{ project_app_root }}'
    version: '{{ project_git_identifier }}'
    force: yes
  register: clone_app
  ignore_errors: True
  become_user: "{{ project_owner }}"
  notify:
    - restart nginx

- name: copy the deploy key
  copy:
    src: '{{ project_deploy_key }}'
    dest: '{{ project_owner_home }}/.ssh/deploy_key'
    owner: '{{ project_owner }}'
    group: '{{ project_owner_group }}'
    mode: 0600
  when: clone_app|failed

- name: clone the repo with a deploy key.
  git:
    repo: '{{ project_git_url }}'
    dest: '{{ project_app_root }}'
    version: '{{ project_git_identifier }}'
    key_file: '{{ project_owner_home }}/.ssh/deploy_key'
    force: yes
  become_user: "{{ project_owner }}"
  when: clone_app|failed
  register: deploy_app
  notify:
    - restart nginx

- name: configure nginx/passenger for the project
  include: passenger_setup.yml

- name: configure postgres for the project
  include: postgres_setup.yml

- name: create the project's solr cores
  include: solr_core_setup.yml
  when: project_solr_url | search( 'localhost|127\.0\.0\.1' )

- name: make sure application runs as project_runner
  file:
    path: "{{ project_app_root }}/config.ru"
    owner: "{{ project_runner }}"
    group: "{{ project_runner_group }}"
    mode: "0444"
    state: file

- name: ensure project_runner can write to necessary directories
  file:
    path: "{{ item.path }}"
    owner: "{{ project_owner }}"
    group: "{{ project_runner_group }}"
    mode: "{{ item.mode }}"
    recurse: yes
    state: directory
  with_items:
    - path: "{{ project_app_root }}/tmp"
      mode: "u=rwX,g=rwXs,o="
    - path: "{{ project_app_root }}/tmp/pids"
      mode: "u=rwX,g=rwXs,o="
    - path: "{{ project_app_root }}/tmp/derivatives"
      mode: "u=rwX,g=rwXs,o="
    - path: "{{ project_app_root }}/tmp/uploads"
      mode: "u=rwX,g=rwXs,o="
    - path: "{{ project_app_root }}/tmp/cache/assets/sprockets/v3.0"
      mode: "u=rwX,g=rwXs,o="
    - path: "{{ project_app_root }}/log"
      mode: "u=rwX,g=rwXs,o="
    - path: "{{ project_app_root }}/db"
      mode: "u=rwX,g=rwXs,o="

- name: ensure log files have the correct ownerships and permissions
  file:
    path: "{{ project_app_root }}/log/{{ item.file }}"
    owner: "{{ project_owner }}"
    group: "{{ project_runner_group }}"
    mode: "{{ item.mode }}"
    state: touch
  with_items:
    - file: "production.log"
      mode: "0660"
    - file: "development.log"
      mode: "0660"
    - file: "test.log"
      mode: "0660"
    - file: "resque-pool.stdout.log"
      mode: "0660"
    - file: "resque-pool.stderr.log"
      mode: "0660"

- name: copy the secrets file
  template:
    src: secrets.yml.j2
    dest: '{{ project_app_root }}/config/secrets.yml'
    owner: '{{ project_owner }}'
    group: '{{ project_runner_group }}'
    mode: '0440'
  notify:
    - restart nginx

- name: install the project's gems for development
  bundler:
    state: present
    chdir: '{{ project_app_root }}'
    deployment_mode: no
    gem_path: vendor/bundle
    user_install: yes
    clean: yes
    exclude_groups: ''
  when: project_app_env != 'production'
  become: yes
  become_user: '{{ project_owner }}'

- name: install the project's gems for production
  bundler:
    state: present
    chdir: '{{ project_app_root }}'
    deployment_mode: no
    gem_path: vendor/bundle
    user_install: yes
    clean: yes
    exclude_groups: 'development test'
  when: project_app_env == 'production'
  become: yes
  become_user: '{{ project_owner }}'

- block:
  - name: check if resque-pool is installed
    stat:
      path: '{{ project_app_root}}/bin/resque-pool'
    register: resque_installed

  - name: install resque-pool service
    include: tasks/resque.yml
    when: resque_installed.stat.exists
  when: active_job_backend == 'resque'

- block:
  - name: check if sidekiq is installed
    stat:
      path: '{{ project_app_root}}/bin/sidekiq'
    register: sidekiq_installed

  - name: install sidekiq services
    include: tasks/sidekiq.yml
    when: sidekiq_installed.stat.exists
  when: active_job_backend == 'sidekiq'

- name: ensure the Noid minter statefile dir exists
  file:
    path: '{{ project_noid_statefile | dirname }}'
    state: directory
    owner: '{{ project_owner }}'
    group: '{{ project_runner_group }}'
    mode: 'ug=rwx'

- name: find project specific tasks
  stat:
    path: '{{ role_path }}/tasks/{{ project_name }}.yml'
  delegate_to: 127.0.0.1
  register: project_tasks
  become: no

- block:
  - name: create db if necessary
    command: ./bin/rake db:create
    args:
      chdir: '{{ project_app_root }}'
    when: clone_app.changed or deploy_app.changed

  - name: migrate the database
    command: ./bin/rake db:migrate
    args:
      chdir: '{{ project_app_root }}'
    when: clone_app.changed or deploy_app.changed
  become: yes
  become_user: '{{ project_runner }}'
  environment:
    RAILS_ENV: '{{ project_app_env }}'

- name: remove old precompiled assets
  command: ./bin/rails assets:clobber
  args:
    chdir: '{{ project_app_root }}'
  become: yes
  become_user: '{{ project_owner }}'
  environment:
    RAILS_ENV: '{{ project_app_env }}'
  when: project_app_env == 'production'
  notify:
    - precompile assets

- name: execute pending handlers for rake tasks to work
  meta: flush_handlers
  when: project_tasks.stat.exists

- block:
  - name: include project specific tasks
    include: tasks/{{ project_name }}.yml
    when: project_tasks.stat.exists
  become: yes
  become_user: '{{ project_runner }}'
  environment:
    RAILS_ENV: '{{ project_app_env }}'
